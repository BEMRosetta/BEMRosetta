// SPDX-License-Identifier: GPL-3.0-or-later
// Copyright 2020 - 2022, the BEMRosetta author and contributors
#include "BEMRosetta.h"
#include "BEMRosetta_int.h"

#include <iostream>
#include <fstream>
#include <unsupported/Eigen/CXX11/Tensor>

using namespace Eigen;
using namespace std;

String readfile_BTS(String fileName, String fileFmt,
                  Tensor<double, 4>& velocity,
                  Tensor<double, 3>& twrVelocity,
                  VectorXd& y,
                  VectorXd& z,
                  VectorXd& zTwr,
                  int& nz,
                  int& ny,
                  double& dz,
                  double& dy,
                  double& dt,
                  double& zHub,
                  double& z1,
                  double& mffws) {

    if (fileFmt.IsEmpty()) 
        fileFmt = "int16";
    
    const int nffc = 3;
    int nt, ntwr, tmp;

	FileInBinary file(fileName);
	if (!file.IsOpen())
		return t_("Impossible to open file");

    tmp   = file.ReadB<int,2>();        // TurbSim format identifier (should = 7 or 8 if periodic), INT(2)

    nz    = file.ReadB<int,2>();        // the number of grid points vertically, INT(4)
    ny    = file.ReadB<int,2>();        // the number of grid points laterally, INT(4)
    ntwr  = file.ReadB<int,2>();        // the number of tower points, INT(4)
    nt    = file.ReadB<int,2>();        // the number of time steps, INT(4)

    dz    = file.ReadB<double,4>();      // grid spacing in vertical direction, REAL(4), in m
    dy    = file.ReadB<double,4>();      // grid spacing in lateral direction, REAL(4), in m
    dt    = file.ReadB<double,4>();      // grid spacing in delta time, REAL(4), in m/s
    mffws = file.ReadB<double,4>();      // the mean wind speed at hub height, REAL(4), in m/s
    zHub  = file.ReadB<double,4>();      // height of the hub, REAL(4), in m
    z1    = file.ReadB<double,4>();      // height of the bottom of the grid, REAL(4), in m

    VectorXd Vslope(3);
    VectorXd Voffset(2);
        
    Vslope(1)  = file.ReadB<double,4>(); // the U-component slope for scaling, REAL(4)
    Voffset(1) = file.ReadB<double,4>(); // the U-component offset for scaling, REAL(4)
    Vslope(2)  = file.ReadB<double,4>(); // the V-component slope for scaling, REAL(4)
    Voffset(2) = file.ReadB<double,4>(); // the V-component offset for scaling, REAL(4)
    Vslope(3)  = file.ReadB<double,4>(); // the W-component slope for scaling, REAL(4)
    Voffset(3) = file.ReadB<double,4>(); // the W-component offset for scaling, REAL(4)
        
    // Read the description string: "Generated by TurbSim (vx.xx, dd-mmm-yyyy) on dd-mmm-yyyy at hh:mm:ss."

    int nchar    = file.ReadB<int,4>();     // the number of characters in the description string, max 200, INT(4)
    StringBuffer str(nchar);
    file.ReadB(str, nchar); 	// the ASCII integer representation of the character string
    String asciiSTR = str;

	Cout() << Format("Reading from the file '%s' with heading: '%s'", fileName, asciiSTR);
    
    int nPts        = ny*nz;
    int nv          = nffc*nPts;               // the size of one time step
    int nvTwr       = nffc*ntwr;
    velocity    = Tensor<double, 4>(nt,nffc,ny,nz);
    velocity.setZero();
    twrVelocity = Tensor<double, 3>(nt,nffc,ntwr); 
	twrVelocity.setZero();



	return "";
}

int Fun() {
    // Example usage
    String fileName = "your_file_name.bts";
    String fileFmt = "int16"; // or "float32"
    Tensor<double, 4> velocity;
    Tensor<double, 3> twrVelocity;
    VectorXd y, z, zTwr;
    int nz, ny;
    double dz, dy, dt, zHub, z1, mffws;

    readfile_BTS(fileName, fileFmt, velocity, twrVelocity, y, z, zTwr, nz, ny, dz, dy, dt, zHub, z1, mffws);

    // Access the data as needed...
    // Example: double u = velocity(it, iy, iz, 0); // U-component at time "it", iy, iz

    return 0;
}